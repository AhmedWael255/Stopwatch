
AVRProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000063c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000b  00800060  00800060  000006b0  2**0
                  ALLOC
  2 .stab         00000954  00000000  00000000  000006b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000008fc  00000000  00000000  00001004  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_1>
   8:	0c 94 32 01 	jmp	0x264	; 0x264 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__vector_6>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__vector_18>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ab 36       	cpi	r26, 0x6B	; 107
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 86 01 	call	0x30c	; 0x30c <main>
  74:	0c 94 1c 03 	jmp	0x638	; 0x638 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_9>:

u8 Tick = 0, sec = 0, min = 0, hr = 0;
u8 Dgt[6];

ISR(TIMER0_OVF_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	3f 93       	push	r19
  8a:	4f 93       	push	r20
  8c:	5f 93       	push	r21
  8e:	6f 93       	push	r22
  90:	7f 93       	push	r23
  92:	8f 93       	push	r24
  94:	9f 93       	push	r25
  96:	af 93       	push	r26
  98:	bf 93       	push	r27
  9a:	ef 93       	push	r30
  9c:	ff 93       	push	r31
  9e:	df 93       	push	r29
  a0:	cf 93       	push	r28
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
	   static u8 i=0;
	   PORTA=~(1<<i);
  a6:	eb e3       	ldi	r30, 0x3B	; 59
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 91 64 00 	lds	r24, 0x0064
  ae:	28 2f       	mov	r18, r24
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	02 2e       	mov	r0, r18
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__vector_9+0x42>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	0a 94       	dec	r0
  c0:	e2 f7       	brpl	.-8      	; 0xba <__vector_9+0x3e>
  c2:	80 95       	com	r24
  c4:	80 83       	st	Z, r24
	   if(i==5)
  c6:	80 91 64 00 	lds	r24, 0x0064
  ca:	85 30       	cpi	r24, 0x05	; 5
  cc:	19 f4       	brne	.+6      	; 0xd4 <__vector_9+0x58>
	      i=0;
  ce:	10 92 64 00 	sts	0x0064, r1
  d2:	05 c0       	rjmp	.+10     	; 0xde <__vector_9+0x62>
	   else
	      i++;
  d4:	80 91 64 00 	lds	r24, 0x0064
  d8:	8f 5f       	subi	r24, 0xFF	; 255
  da:	80 93 64 00 	sts	0x0064, r24

	   Display(Dgt[i]);
  de:	80 91 64 00 	lds	r24, 0x0064
  e2:	88 2f       	mov	r24, r24
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	fc 01       	movw	r30, r24
  e8:	eb 59       	subi	r30, 0x9B	; 155
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	80 81       	ld	r24, Z
  ee:	0e 94 71 02 	call	0x4e2	; 0x4e2 <Display>

}
  f2:	cf 91       	pop	r28
  f4:	df 91       	pop	r29
  f6:	ff 91       	pop	r31
  f8:	ef 91       	pop	r30
  fa:	bf 91       	pop	r27
  fc:	af 91       	pop	r26
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	7f 91       	pop	r23
 104:	6f 91       	pop	r22
 106:	5f 91       	pop	r21
 108:	4f 91       	pop	r20
 10a:	3f 91       	pop	r19
 10c:	2f 91       	pop	r18
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	6f 93       	push	r22
 124:	7f 93       	push	r23
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
 12a:	df 93       	push	r29
 12c:	cf 93       	push	r28
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
	Tick++;
 132:	80 91 60 00 	lds	r24, 0x0060
 136:	8f 5f       	subi	r24, 0xFF	; 255
 138:	80 93 60 00 	sts	0x0060, r24
		if(Tick == 2)
 13c:	80 91 60 00 	lds	r24, 0x0060
 140:	82 30       	cpi	r24, 0x02	; 2
 142:	09 f0       	breq	.+2      	; 0x146 <__vector_6+0x2e>
 144:	5a c0       	rjmp	.+180    	; 0x1fa <__vector_6+0xe2>
		{

			sec++;
 146:	80 91 61 00 	lds	r24, 0x0061
 14a:	8f 5f       	subi	r24, 0xFF	; 255
 14c:	80 93 61 00 	sts	0x0061, r24
			if(sec == 60)
 150:	80 91 61 00 	lds	r24, 0x0061
 154:	8c 33       	cpi	r24, 0x3C	; 60
 156:	39 f4       	brne	.+14     	; 0x166 <__vector_6+0x4e>
			{
				sec = 0;
 158:	10 92 61 00 	sts	0x0061, r1
				min++;
 15c:	80 91 62 00 	lds	r24, 0x0062
 160:	8f 5f       	subi	r24, 0xFF	; 255
 162:	80 93 62 00 	sts	0x0062, r24
			}

			if(min == 60)
 166:	80 91 62 00 	lds	r24, 0x0062
 16a:	8c 33       	cpi	r24, 0x3C	; 60
 16c:	39 f4       	brne	.+14     	; 0x17c <__vector_6+0x64>
			{
				min = 0;
 16e:	10 92 62 00 	sts	0x0062, r1
				hr++;
 172:	80 91 63 00 	lds	r24, 0x0063
 176:	8f 5f       	subi	r24, 0xFF	; 255
 178:	80 93 63 00 	sts	0x0063, r24
			}

			if(hr == 24)
 17c:	80 91 63 00 	lds	r24, 0x0063
 180:	88 31       	cpi	r24, 0x18	; 24
 182:	31 f4       	brne	.+12     	; 0x190 <__vector_6+0x78>
			{
				hr = 0;
 184:	10 92 63 00 	sts	0x0063, r1
				min = 0;
 188:	10 92 62 00 	sts	0x0062, r1
				sec = 0;
 18c:	10 92 61 00 	sts	0x0061, r1
			}

			Dgt[0] = sec%10;
 190:	80 91 61 00 	lds	r24, 0x0061
 194:	9a e0       	ldi	r25, 0x0A	; 10
 196:	69 2f       	mov	r22, r25
 198:	0e 94 10 03 	call	0x620	; 0x620 <__udivmodqi4>
 19c:	89 2f       	mov	r24, r25
 19e:	80 93 65 00 	sts	0x0065, r24
			Dgt[1] = sec/10;
 1a2:	80 91 61 00 	lds	r24, 0x0061
 1a6:	9a e0       	ldi	r25, 0x0A	; 10
 1a8:	69 2f       	mov	r22, r25
 1aa:	0e 94 10 03 	call	0x620	; 0x620 <__udivmodqi4>
 1ae:	80 93 66 00 	sts	0x0066, r24
			Dgt[2] = min%10;
 1b2:	80 91 62 00 	lds	r24, 0x0062
 1b6:	9a e0       	ldi	r25, 0x0A	; 10
 1b8:	69 2f       	mov	r22, r25
 1ba:	0e 94 10 03 	call	0x620	; 0x620 <__udivmodqi4>
 1be:	89 2f       	mov	r24, r25
 1c0:	80 93 67 00 	sts	0x0067, r24
			Dgt[3] = min/10;
 1c4:	80 91 62 00 	lds	r24, 0x0062
 1c8:	9a e0       	ldi	r25, 0x0A	; 10
 1ca:	69 2f       	mov	r22, r25
 1cc:	0e 94 10 03 	call	0x620	; 0x620 <__udivmodqi4>
 1d0:	80 93 68 00 	sts	0x0068, r24
			Dgt[4] = hr%10;
 1d4:	80 91 63 00 	lds	r24, 0x0063
 1d8:	9a e0       	ldi	r25, 0x0A	; 10
 1da:	69 2f       	mov	r22, r25
 1dc:	0e 94 10 03 	call	0x620	; 0x620 <__udivmodqi4>
 1e0:	89 2f       	mov	r24, r25
 1e2:	80 93 69 00 	sts	0x0069, r24
			Dgt[5] = hr/10;
 1e6:	80 91 63 00 	lds	r24, 0x0063
 1ea:	9a e0       	ldi	r25, 0x0A	; 10
 1ec:	69 2f       	mov	r22, r25
 1ee:	0e 94 10 03 	call	0x620	; 0x620 <__udivmodqi4>
 1f2:	80 93 6a 00 	sts	0x006A, r24

		Tick=0;
 1f6:	10 92 60 00 	sts	0x0060, r1
		}
}
 1fa:	cf 91       	pop	r28
 1fc:	df 91       	pop	r29
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	7f 91       	pop	r23
 204:	6f 91       	pop	r22
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <__vector_1>:

ISR(INT0_vect)
{
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	2f 93       	push	r18
 21c:	3f 93       	push	r19
 21e:	4f 93       	push	r20
 220:	5f 93       	push	r21
 222:	6f 93       	push	r22
 224:	7f 93       	push	r23
 226:	8f 93       	push	r24
 228:	9f 93       	push	r25
 22a:	af 93       	push	r26
 22c:	bf 93       	push	r27
 22e:	ef 93       	push	r30
 230:	ff 93       	push	r31
 232:	df 93       	push	r29
 234:	cf 93       	push	r28
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
	TMR1_Reset();
 23a:	0e 94 41 02 	call	0x482	; 0x482 <TMR1_Reset>
}
 23e:	cf 91       	pop	r28
 240:	df 91       	pop	r29
 242:	ff 91       	pop	r31
 244:	ef 91       	pop	r30
 246:	bf 91       	pop	r27
 248:	af 91       	pop	r26
 24a:	9f 91       	pop	r25
 24c:	8f 91       	pop	r24
 24e:	7f 91       	pop	r23
 250:	6f 91       	pop	r22
 252:	5f 91       	pop	r21
 254:	4f 91       	pop	r20
 256:	3f 91       	pop	r19
 258:	2f 91       	pop	r18
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <__vector_2>:

ISR(INT1_vect)
{
 264:	1f 92       	push	r1
 266:	0f 92       	push	r0
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	0f 92       	push	r0
 26c:	11 24       	eor	r1, r1
 26e:	2f 93       	push	r18
 270:	3f 93       	push	r19
 272:	4f 93       	push	r20
 274:	5f 93       	push	r21
 276:	6f 93       	push	r22
 278:	7f 93       	push	r23
 27a:	8f 93       	push	r24
 27c:	9f 93       	push	r25
 27e:	af 93       	push	r26
 280:	bf 93       	push	r27
 282:	ef 93       	push	r30
 284:	ff 93       	push	r31
 286:	df 93       	push	r29
 288:	cf 93       	push	r28
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
	TMR1_Pause();
 28e:	0e 94 55 02 	call	0x4aa	; 0x4aa <TMR1_Pause>
}
 292:	cf 91       	pop	r28
 294:	df 91       	pop	r29
 296:	ff 91       	pop	r31
 298:	ef 91       	pop	r30
 29a:	bf 91       	pop	r27
 29c:	af 91       	pop	r26
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	7f 91       	pop	r23
 2a4:	6f 91       	pop	r22
 2a6:	5f 91       	pop	r21
 2a8:	4f 91       	pop	r20
 2aa:	3f 91       	pop	r19
 2ac:	2f 91       	pop	r18
 2ae:	0f 90       	pop	r0
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	0f 90       	pop	r0
 2b4:	1f 90       	pop	r1
 2b6:	18 95       	reti

000002b8 <__vector_18>:

ISR(INT2_vect)
{
 2b8:	1f 92       	push	r1
 2ba:	0f 92       	push	r0
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	0f 92       	push	r0
 2c0:	11 24       	eor	r1, r1
 2c2:	2f 93       	push	r18
 2c4:	3f 93       	push	r19
 2c6:	4f 93       	push	r20
 2c8:	5f 93       	push	r21
 2ca:	6f 93       	push	r22
 2cc:	7f 93       	push	r23
 2ce:	8f 93       	push	r24
 2d0:	9f 93       	push	r25
 2d2:	af 93       	push	r26
 2d4:	bf 93       	push	r27
 2d6:	ef 93       	push	r30
 2d8:	ff 93       	push	r31
 2da:	df 93       	push	r29
 2dc:	cf 93       	push	r28
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
	TMR1_Resume();
 2e2:	0e 94 63 02 	call	0x4c6	; 0x4c6 <TMR1_Resume>
}
 2e6:	cf 91       	pop	r28
 2e8:	df 91       	pop	r29
 2ea:	ff 91       	pop	r31
 2ec:	ef 91       	pop	r30
 2ee:	bf 91       	pop	r27
 2f0:	af 91       	pop	r26
 2f2:	9f 91       	pop	r25
 2f4:	8f 91       	pop	r24
 2f6:	7f 91       	pop	r23
 2f8:	6f 91       	pop	r22
 2fa:	5f 91       	pop	r21
 2fc:	4f 91       	pop	r20
 2fe:	3f 91       	pop	r19
 300:	2f 91       	pop	r18
 302:	0f 90       	pop	r0
 304:	0f be       	out	0x3f, r0	; 63
 306:	0f 90       	pop	r0
 308:	1f 90       	pop	r1
 30a:	18 95       	reti

0000030c <main>:

int main()
{
 30c:	df 93       	push	r29
 30e:	cf 93       	push	r28
 310:	cd b7       	in	r28, 0x3d	; 61
 312:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x3F;
 314:	ea e3       	ldi	r30, 0x3A	; 58
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	8f e3       	ldi	r24, 0x3F	; 63
 31a:	80 83       	st	Z, r24
	DDRC = 0x0F;
 31c:	e4 e3       	ldi	r30, 0x34	; 52
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	8f e0       	ldi	r24, 0x0F	; 15
 322:	80 83       	st	Z, r24

	PORTD |= (1 << PD2);
 324:	a2 e3       	ldi	r26, 0x32	; 50
 326:	b0 e0       	ldi	r27, 0x00	; 0
 328:	e2 e3       	ldi	r30, 0x32	; 50
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	84 60       	ori	r24, 0x04	; 4
 330:	8c 93       	st	X, r24
	PORTB |= (1 << PB2);
 332:	a8 e3       	ldi	r26, 0x38	; 56
 334:	b0 e0       	ldi	r27, 0x00	; 0
 336:	e8 e3       	ldi	r30, 0x38	; 56
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	84 60       	ori	r24, 0x04	; 4
 33e:	8c 93       	st	X, r24


	INT0_Init();
 340:	0e 94 ab 01 	call	0x356	; 0x356 <INT0_Init>
	INT1_Init();
 344:	0e 94 d5 01 	call	0x3aa	; 0x3aa <INT1_Init>
	INT2_Init();
 348:	0e 94 ff 01 	call	0x3fe	; 0x3fe <INT2_Init>

	TMR0_Init();
 34c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <TMR0_Init>
	TMR1_Init();
 350:	0e 94 22 02 	call	0x444	; 0x444 <TMR1_Init>
 354:	ff cf       	rjmp	.-2      	; 0x354 <main+0x48>

00000356 <INT0_Init>:
	}

}

void INT0_Init(void)
{
 356:	df 93       	push	r29
 358:	cf 93       	push	r28
 35a:	cd b7       	in	r28, 0x3d	; 61
 35c:	de b7       	in	r29, 0x3e	; 62
	SREG  &= ~(1<<7);                   // Disable interrupts by clearing I-bit
 35e:	af e5       	ldi	r26, 0x5F	; 95
 360:	b0 e0       	ldi	r27, 0x00	; 0
 362:	ef e5       	ldi	r30, 0x5F	; 95
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	80 81       	ld	r24, Z
 368:	8f 77       	andi	r24, 0x7F	; 127
 36a:	8c 93       	st	X, r24
	DDRD  &= (~(1<<PD2));               // Configure INT0/PD2 as input pin
 36c:	a1 e3       	ldi	r26, 0x31	; 49
 36e:	b0 e0       	ldi	r27, 0x00	; 0
 370:	e1 e3       	ldi	r30, 0x31	; 49
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	8b 7f       	andi	r24, 0xFB	; 251
 378:	8c 93       	st	X, r24
	GICR  |= (1<<INT0);                 // Enable external interrupt pin INT0
 37a:	ab e5       	ldi	r26, 0x5B	; 91
 37c:	b0 e0       	ldi	r27, 0x00	; 0
 37e:	eb e5       	ldi	r30, 0x5B	; 91
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	80 64       	ori	r24, 0x40	; 64
 386:	8c 93       	st	X, r24
	MCUCR |= (1<<ISC01);   				// Trigger INT0 with the raising edge
 388:	a5 e5       	ldi	r26, 0x55	; 85
 38a:	b0 e0       	ldi	r27, 0x00	; 0
 38c:	e5 e5       	ldi	r30, 0x55	; 85
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	80 81       	ld	r24, Z
 392:	82 60       	ori	r24, 0x02	; 2
 394:	8c 93       	st	X, r24
	SREG  |= (1<<7);                    // Enable interrupts by setting I-bit
 396:	af e5       	ldi	r26, 0x5F	; 95
 398:	b0 e0       	ldi	r27, 0x00	; 0
 39a:	ef e5       	ldi	r30, 0x5F	; 95
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	80 81       	ld	r24, Z
 3a0:	80 68       	ori	r24, 0x80	; 128
 3a2:	8c 93       	st	X, r24
}
 3a4:	cf 91       	pop	r28
 3a6:	df 91       	pop	r29
 3a8:	08 95       	ret

000003aa <INT1_Init>:

void INT1_Init(void)
{
 3aa:	df 93       	push	r29
 3ac:	cf 93       	push	r28
 3ae:	cd b7       	in	r28, 0x3d	; 61
 3b0:	de b7       	in	r29, 0x3e	; 62
	SREG  &= ~(1<<7);                   // Disable interrupts by clearing I-bit
 3b2:	af e5       	ldi	r26, 0x5F	; 95
 3b4:	b0 e0       	ldi	r27, 0x00	; 0
 3b6:	ef e5       	ldi	r30, 0x5F	; 95
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	8f 77       	andi	r24, 0x7F	; 127
 3be:	8c 93       	st	X, r24
	DDRD  &= ~(1<<PD3);               	// Configure INT1/PD3 as input pin
 3c0:	a1 e3       	ldi	r26, 0x31	; 49
 3c2:	b0 e0       	ldi	r27, 0x00	; 0
 3c4:	e1 e3       	ldi	r30, 0x31	; 49
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	87 7f       	andi	r24, 0xF7	; 247
 3cc:	8c 93       	st	X, r24
	GICR  |= (1<<INT1);                 // Enable external interrupt pin INT1
 3ce:	ab e5       	ldi	r26, 0x5B	; 91
 3d0:	b0 e0       	ldi	r27, 0x00	; 0
 3d2:	eb e5       	ldi	r30, 0x5B	; 91
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	80 68       	ori	r24, 0x80	; 128
 3da:	8c 93       	st	X, r24
	MCUCR |= (1<<ISC11 | 1 << ISC10);   // Trigger INT0 with the raising edge
 3dc:	a5 e5       	ldi	r26, 0x55	; 85
 3de:	b0 e0       	ldi	r27, 0x00	; 0
 3e0:	e5 e5       	ldi	r30, 0x55	; 85
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	8c 60       	ori	r24, 0x0C	; 12
 3e8:	8c 93       	st	X, r24
	SREG  |= (1<<7);                    // Enable interrupts by setting I-bit
 3ea:	af e5       	ldi	r26, 0x5F	; 95
 3ec:	b0 e0       	ldi	r27, 0x00	; 0
 3ee:	ef e5       	ldi	r30, 0x5F	; 95
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	80 68       	ori	r24, 0x80	; 128
 3f6:	8c 93       	st	X, r24
}
 3f8:	cf 91       	pop	r28
 3fa:	df 91       	pop	r29
 3fc:	08 95       	ret

000003fe <INT2_Init>:

void INT2_Init(void)
{
 3fe:	df 93       	push	r29
 400:	cf 93       	push	r28
 402:	cd b7       	in	r28, 0x3d	; 61
 404:	de b7       	in	r29, 0x3e	; 62
	SREG  &= ~(1<<7);                   // Disable interrupts by clearing I-bit
 406:	af e5       	ldi	r26, 0x5F	; 95
 408:	b0 e0       	ldi	r27, 0x00	; 0
 40a:	ef e5       	ldi	r30, 0x5F	; 95
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	80 81       	ld	r24, Z
 410:	8f 77       	andi	r24, 0x7F	; 127
 412:	8c 93       	st	X, r24
	DDRB  &= (~(1<<PB2));               // Configure INT2/PB2 as input pin
 414:	a7 e3       	ldi	r26, 0x37	; 55
 416:	b0 e0       	ldi	r27, 0x00	; 0
 418:	e7 e3       	ldi	r30, 0x37	; 55
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	80 81       	ld	r24, Z
 41e:	8b 7f       	andi	r24, 0xFB	; 251
 420:	8c 93       	st	X, r24
	GICR  |= (1<<INT2);                 // Enable external interrupt pin INT2
 422:	ab e5       	ldi	r26, 0x5B	; 91
 424:	b0 e0       	ldi	r27, 0x00	; 0
 426:	eb e5       	ldi	r30, 0x5B	; 91
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	80 81       	ld	r24, Z
 42c:	80 62       	ori	r24, 0x20	; 32
 42e:	8c 93       	st	X, r24
	SREG  |= (1<<7);                    // Enable interrupts by setting I-bit
 430:	af e5       	ldi	r26, 0x5F	; 95
 432:	b0 e0       	ldi	r27, 0x00	; 0
 434:	ef e5       	ldi	r30, 0x5F	; 95
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	80 81       	ld	r24, Z
 43a:	80 68       	ori	r24, 0x80	; 128
 43c:	8c 93       	st	X, r24
}
 43e:	cf 91       	pop	r28
 440:	df 91       	pop	r29
 442:	08 95       	ret

00000444 <TMR1_Init>:

void TMR1_Init(void)
{
 444:	df 93       	push	r29
 446:	cf 93       	push	r28
 448:	cd b7       	in	r28, 0x3d	; 61
 44a:	de b7       	in	r29, 0x3e	; 62
	TCCR1B |= (1 << WGM12 | 1 << CS11);
 44c:	ae e4       	ldi	r26, 0x4E	; 78
 44e:	b0 e0       	ldi	r27, 0x00	; 0
 450:	ee e4       	ldi	r30, 0x4E	; 78
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	80 81       	ld	r24, Z
 456:	8a 60       	ori	r24, 0x0A	; 10
 458:	8c 93       	st	X, r24
	TCNT1 = 0;
 45a:	ec e4       	ldi	r30, 0x4C	; 76
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	11 82       	std	Z+1, r1	; 0x01
 460:	10 82       	st	Z, r1
	OCR1A = 62500;
 462:	ea e4       	ldi	r30, 0x4A	; 74
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	84 e2       	ldi	r24, 0x24	; 36
 468:	94 ef       	ldi	r25, 0xF4	; 244
 46a:	91 83       	std	Z+1, r25	; 0x01
 46c:	80 83       	st	Z, r24
	TIMSK |= (1<<OCIE1A);
 46e:	a9 e5       	ldi	r26, 0x59	; 89
 470:	b0 e0       	ldi	r27, 0x00	; 0
 472:	e9 e5       	ldi	r30, 0x59	; 89
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	80 81       	ld	r24, Z
 478:	80 61       	ori	r24, 0x10	; 16
 47a:	8c 93       	st	X, r24
}
 47c:	cf 91       	pop	r28
 47e:	df 91       	pop	r29
 480:	08 95       	ret

00000482 <TMR1_Reset>:

void TMR1_Reset(void)
{
 482:	df 93       	push	r29
 484:	cf 93       	push	r28
 486:	cd b7       	in	r28, 0x3d	; 61
 488:	de b7       	in	r29, 0x3e	; 62
	sec = 0, min = 0, hr = 0;
 48a:	10 92 61 00 	sts	0x0061, r1
 48e:	10 92 62 00 	sts	0x0062, r1
 492:	10 92 63 00 	sts	0x0063, r1
	TCCR1B |= (1<<CS11);
 496:	ae e4       	ldi	r26, 0x4E	; 78
 498:	b0 e0       	ldi	r27, 0x00	; 0
 49a:	ee e4       	ldi	r30, 0x4E	; 78
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	80 81       	ld	r24, Z
 4a0:	82 60       	ori	r24, 0x02	; 2
 4a2:	8c 93       	st	X, r24
}
 4a4:	cf 91       	pop	r28
 4a6:	df 91       	pop	r29
 4a8:	08 95       	ret

000004aa <TMR1_Pause>:

void TMR1_Pause(void)
{
 4aa:	df 93       	push	r29
 4ac:	cf 93       	push	r28
 4ae:	cd b7       	in	r28, 0x3d	; 61
 4b0:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~(1<<CS11);
 4b2:	ae e4       	ldi	r26, 0x4E	; 78
 4b4:	b0 e0       	ldi	r27, 0x00	; 0
 4b6:	ee e4       	ldi	r30, 0x4E	; 78
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	80 81       	ld	r24, Z
 4bc:	8d 7f       	andi	r24, 0xFD	; 253
 4be:	8c 93       	st	X, r24
}
 4c0:	cf 91       	pop	r28
 4c2:	df 91       	pop	r29
 4c4:	08 95       	ret

000004c6 <TMR1_Resume>:

void TMR1_Resume(void)
{
 4c6:	df 93       	push	r29
 4c8:	cf 93       	push	r28
 4ca:	cd b7       	in	r28, 0x3d	; 61
 4cc:	de b7       	in	r29, 0x3e	; 62
	TCCR1B |= (1<<WGM12| 1<<CS11);
 4ce:	ae e4       	ldi	r26, 0x4E	; 78
 4d0:	b0 e0       	ldi	r27, 0x00	; 0
 4d2:	ee e4       	ldi	r30, 0x4E	; 78
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	80 81       	ld	r24, Z
 4d8:	8a 60       	ori	r24, 0x0A	; 10
 4da:	8c 93       	st	X, r24
}
 4dc:	cf 91       	pop	r28
 4de:	df 91       	pop	r29
 4e0:	08 95       	ret

000004e2 <Display>:

void Display(u8 c)
{
 4e2:	df 93       	push	r29
 4e4:	cf 93       	push	r28
 4e6:	00 d0       	rcall	.+0      	; 0x4e8 <Display+0x6>
 4e8:	0f 92       	push	r0
 4ea:	cd b7       	in	r28, 0x3d	; 61
 4ec:	de b7       	in	r29, 0x3e	; 62
 4ee:	89 83       	std	Y+1, r24	; 0x01

	switch(c)
 4f0:	89 81       	ldd	r24, Y+1	; 0x01
 4f2:	28 2f       	mov	r18, r24
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	3b 83       	std	Y+3, r19	; 0x03
 4f8:	2a 83       	std	Y+2, r18	; 0x02
 4fa:	8a 81       	ldd	r24, Y+2	; 0x02
 4fc:	9b 81       	ldd	r25, Y+3	; 0x03
 4fe:	84 30       	cpi	r24, 0x04	; 4
 500:	91 05       	cpc	r25, r1
 502:	09 f4       	brne	.+2      	; 0x506 <Display+0x24>
 504:	52 c0       	rjmp	.+164    	; 0x5aa <Display+0xc8>
 506:	2a 81       	ldd	r18, Y+2	; 0x02
 508:	3b 81       	ldd	r19, Y+3	; 0x03
 50a:	25 30       	cpi	r18, 0x05	; 5
 50c:	31 05       	cpc	r19, r1
 50e:	d4 f4       	brge	.+52     	; 0x544 <Display+0x62>
 510:	8a 81       	ldd	r24, Y+2	; 0x02
 512:	9b 81       	ldd	r25, Y+3	; 0x03
 514:	81 30       	cpi	r24, 0x01	; 1
 516:	91 05       	cpc	r25, r1
 518:	c9 f1       	breq	.+114    	; 0x58c <Display+0xaa>
 51a:	2a 81       	ldd	r18, Y+2	; 0x02
 51c:	3b 81       	ldd	r19, Y+3	; 0x03
 51e:	22 30       	cpi	r18, 0x02	; 2
 520:	31 05       	cpc	r19, r1
 522:	2c f4       	brge	.+10     	; 0x52e <Display+0x4c>
 524:	8a 81       	ldd	r24, Y+2	; 0x02
 526:	9b 81       	ldd	r25, Y+3	; 0x03
 528:	00 97       	sbiw	r24, 0x00	; 0
 52a:	61 f1       	breq	.+88     	; 0x584 <Display+0xa2>
 52c:	5b c0       	rjmp	.+182    	; 0x5e4 <Display+0x102>
 52e:	2a 81       	ldd	r18, Y+2	; 0x02
 530:	3b 81       	ldd	r19, Y+3	; 0x03
 532:	22 30       	cpi	r18, 0x02	; 2
 534:	31 05       	cpc	r19, r1
 536:	79 f1       	breq	.+94     	; 0x596 <Display+0xb4>
 538:	8a 81       	ldd	r24, Y+2	; 0x02
 53a:	9b 81       	ldd	r25, Y+3	; 0x03
 53c:	83 30       	cpi	r24, 0x03	; 3
 53e:	91 05       	cpc	r25, r1
 540:	79 f1       	breq	.+94     	; 0x5a0 <Display+0xbe>
 542:	50 c0       	rjmp	.+160    	; 0x5e4 <Display+0x102>
 544:	2a 81       	ldd	r18, Y+2	; 0x02
 546:	3b 81       	ldd	r19, Y+3	; 0x03
 548:	27 30       	cpi	r18, 0x07	; 7
 54a:	31 05       	cpc	r19, r1
 54c:	e9 f1       	breq	.+122    	; 0x5c8 <Display+0xe6>
 54e:	8a 81       	ldd	r24, Y+2	; 0x02
 550:	9b 81       	ldd	r25, Y+3	; 0x03
 552:	88 30       	cpi	r24, 0x08	; 8
 554:	91 05       	cpc	r25, r1
 556:	5c f4       	brge	.+22     	; 0x56e <Display+0x8c>
 558:	2a 81       	ldd	r18, Y+2	; 0x02
 55a:	3b 81       	ldd	r19, Y+3	; 0x03
 55c:	25 30       	cpi	r18, 0x05	; 5
 55e:	31 05       	cpc	r19, r1
 560:	49 f1       	breq	.+82     	; 0x5b4 <Display+0xd2>
 562:	8a 81       	ldd	r24, Y+2	; 0x02
 564:	9b 81       	ldd	r25, Y+3	; 0x03
 566:	86 30       	cpi	r24, 0x06	; 6
 568:	91 05       	cpc	r25, r1
 56a:	49 f1       	breq	.+82     	; 0x5be <Display+0xdc>
 56c:	3b c0       	rjmp	.+118    	; 0x5e4 <Display+0x102>
 56e:	2a 81       	ldd	r18, Y+2	; 0x02
 570:	3b 81       	ldd	r19, Y+3	; 0x03
 572:	28 30       	cpi	r18, 0x08	; 8
 574:	31 05       	cpc	r19, r1
 576:	69 f1       	breq	.+90     	; 0x5d2 <Display+0xf0>
 578:	8a 81       	ldd	r24, Y+2	; 0x02
 57a:	9b 81       	ldd	r25, Y+3	; 0x03
 57c:	89 30       	cpi	r24, 0x09	; 9
 57e:	91 05       	cpc	r25, r1
 580:	69 f1       	breq	.+90     	; 0x5dc <Display+0xfa>
 582:	30 c0       	rjmp	.+96     	; 0x5e4 <Display+0x102>
	{
	case 0:
		PORTC = 0;
 584:	e5 e3       	ldi	r30, 0x35	; 53
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	10 82       	st	Z, r1
 58a:	2c c0       	rjmp	.+88     	; 0x5e4 <Display+0x102>
		break;

	case 1:
		PORTC = 1;
 58c:	e5 e3       	ldi	r30, 0x35	; 53
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	80 83       	st	Z, r24
 594:	27 c0       	rjmp	.+78     	; 0x5e4 <Display+0x102>
		break;

	case 2:
		PORTC = 2;
 596:	e5 e3       	ldi	r30, 0x35	; 53
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	82 e0       	ldi	r24, 0x02	; 2
 59c:	80 83       	st	Z, r24
 59e:	22 c0       	rjmp	.+68     	; 0x5e4 <Display+0x102>
		break;

	case 3:
		PORTC = 3;
 5a0:	e5 e3       	ldi	r30, 0x35	; 53
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	83 e0       	ldi	r24, 0x03	; 3
 5a6:	80 83       	st	Z, r24
 5a8:	1d c0       	rjmp	.+58     	; 0x5e4 <Display+0x102>
		break;

	case 4:
		PORTC = 4;
 5aa:	e5 e3       	ldi	r30, 0x35	; 53
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
 5ae:	84 e0       	ldi	r24, 0x04	; 4
 5b0:	80 83       	st	Z, r24
 5b2:	18 c0       	rjmp	.+48     	; 0x5e4 <Display+0x102>
		break;

	case 5:
		PORTC = 5;
 5b4:	e5 e3       	ldi	r30, 0x35	; 53
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	85 e0       	ldi	r24, 0x05	; 5
 5ba:	80 83       	st	Z, r24
 5bc:	13 c0       	rjmp	.+38     	; 0x5e4 <Display+0x102>
		break;

	case 6:
		PORTC = 6;
 5be:	e5 e3       	ldi	r30, 0x35	; 53
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	86 e0       	ldi	r24, 0x06	; 6
 5c4:	80 83       	st	Z, r24
 5c6:	0e c0       	rjmp	.+28     	; 0x5e4 <Display+0x102>
		break;

	case 7:
		PORTC = 7;
 5c8:	e5 e3       	ldi	r30, 0x35	; 53
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
 5cc:	87 e0       	ldi	r24, 0x07	; 7
 5ce:	80 83       	st	Z, r24
 5d0:	09 c0       	rjmp	.+18     	; 0x5e4 <Display+0x102>
		break;

	case 8:
		PORTC = 8;
 5d2:	e5 e3       	ldi	r30, 0x35	; 53
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	88 e0       	ldi	r24, 0x08	; 8
 5d8:	80 83       	st	Z, r24
 5da:	04 c0       	rjmp	.+8      	; 0x5e4 <Display+0x102>
		break;

	case 9:
		PORTC = 9;
 5dc:	e5 e3       	ldi	r30, 0x35	; 53
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	89 e0       	ldi	r24, 0x09	; 9
 5e2:	80 83       	st	Z, r24
		break;
	}

}
 5e4:	0f 90       	pop	r0
 5e6:	0f 90       	pop	r0
 5e8:	0f 90       	pop	r0
 5ea:	cf 91       	pop	r28
 5ec:	df 91       	pop	r29
 5ee:	08 95       	ret

000005f0 <TMR0_Init>:

void TMR0_Init(void)
{
 5f0:	df 93       	push	r29
 5f2:	cf 93       	push	r28
 5f4:	cd b7       	in	r28, 0x3d	; 61
 5f6:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0;
 5f8:	e2 e5       	ldi	r30, 0x52	; 82
 5fa:	f0 e0       	ldi	r31, 0x00	; 0
 5fc:	10 82       	st	Z, r1
    TCCR0|=(1<<CS01);
 5fe:	a3 e5       	ldi	r26, 0x53	; 83
 600:	b0 e0       	ldi	r27, 0x00	; 0
 602:	e3 e5       	ldi	r30, 0x53	; 83
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	80 81       	ld	r24, Z
 608:	82 60       	ori	r24, 0x02	; 2
 60a:	8c 93       	st	X, r24
	TIMSK|=(1<<TOIE0);
 60c:	a9 e5       	ldi	r26, 0x59	; 89
 60e:	b0 e0       	ldi	r27, 0x00	; 0
 610:	e9 e5       	ldi	r30, 0x59	; 89
 612:	f0 e0       	ldi	r31, 0x00	; 0
 614:	80 81       	ld	r24, Z
 616:	81 60       	ori	r24, 0x01	; 1
 618:	8c 93       	st	X, r24
}
 61a:	cf 91       	pop	r28
 61c:	df 91       	pop	r29
 61e:	08 95       	ret

00000620 <__udivmodqi4>:
 620:	99 1b       	sub	r25, r25
 622:	79 e0       	ldi	r23, 0x09	; 9
 624:	04 c0       	rjmp	.+8      	; 0x62e <__udivmodqi4_ep>

00000626 <__udivmodqi4_loop>:
 626:	99 1f       	adc	r25, r25
 628:	96 17       	cp	r25, r22
 62a:	08 f0       	brcs	.+2      	; 0x62e <__udivmodqi4_ep>
 62c:	96 1b       	sub	r25, r22

0000062e <__udivmodqi4_ep>:
 62e:	88 1f       	adc	r24, r24
 630:	7a 95       	dec	r23
 632:	c9 f7       	brne	.-14     	; 0x626 <__udivmodqi4_loop>
 634:	80 95       	com	r24
 636:	08 95       	ret

00000638 <_exit>:
 638:	f8 94       	cli

0000063a <__stop_program>:
 63a:	ff cf       	rjmp	.-2      	; 0x63a <__stop_program>
